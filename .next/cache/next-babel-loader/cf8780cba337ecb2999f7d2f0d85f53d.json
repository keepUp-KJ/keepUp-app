{"ast":null,"code":"\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var next=_interopRequireWildcard(require(\"./\"));var _eventSourcePolyfill=_interopRequireDefault(require(\"./dev/event-source-polyfill\"));var _onDemandEntriesClient=_interopRequireDefault(require(\"./dev/on-demand-entries-client\"));var _webpackHotMiddlewareClient=_interopRequireDefault(require(\"./dev/webpack-hot-middleware-client\"));var _devBuildWatcher=_interopRequireDefault(require(\"./dev/dev-build-watcher\"));var _prerenderIndicator=_interopRequireDefault(require(\"./dev/prerender-indicator\"));var _fouc=require(\"./dev/fouc\");import(\"./dev/noop\");;if(!window.EventSource){window.EventSource=_eventSourcePolyfill[\"default\"];}var _window=window,assetPrefix=_window.__NEXT_DATA__.assetPrefix;var prefix=assetPrefix||'';var webpackHMR=(0,_webpackHotMiddlewareClient[\"default\"])({assetPrefix:prefix});window.next=next;(0,next[\"default\"])({webpackHMR:webpackHMR}).then(function(_ref){var renderCtx=_ref.renderCtx,render=_ref.render;(0,_onDemandEntriesClient[\"default\"])({assetPrefix:prefix});if(process.env.__NEXT_BUILD_INDICATOR)(0,_devBuildWatcher[\"default\"])();if(process.env.__NEXT_PRERENDER_INDICATOR&&!(typeof process!=='undefined'&&'electron'in process.versions)){(0,_prerenderIndicator[\"default\"])();}(0,_fouc.displayContent)(function(){render(renderCtx);});})[\"catch\"](function(err){console.error('Error was not caught',err);});","map":{"version":3,"sources":["../../client/next-dev.js"],"names":["__REPLACE_NOOP_IMPORT__","window","EventSourcePolyfill","__NEXT_DATA__","prefix","assetPrefix","webpackHMR","process","render","err","console"],"mappings":"qLACA,GAAA,CAAA,IAAA,CAAA,uBAAA,CAAA,OAAA,MAAA,CAAA,CACA,GAAA,CAAA,oBAAA,CAAA,sBAAA,CAAA,OAAA,+BAAA,CAAA,CACA,GAAA,CAAA,sBAAA,CAAA,sBAAA,CAAA,OAAA,kCAAA,CAAA,CACA,GAAA,CAAA,2BAAA,CAAA,sBAAA,CAAA,OAAA,uCAAA,CAAA,CACA,GAAA,CAAA,gBAAA,CAAA,sBAAA,CAAA,OAAA,2BAAA,CAAA,CACA,GAAA,CAAA,mBAAA,CAAA,sBAAA,CAAA,OAAA,6BAAA,CAAA,CACA,GAAA,CAAA,KAAA,CAAA,OAPA,cAOA,CAOAA,qBAAAA,CAGA,GAAI,CAACC,MAAM,CAAX,WAAA,CAAyB,CACvBA,MAAM,CAANA,WAAAA,CAAqBC,oBAArBD,WAAAA,CAGF,C,YAAA,M,CAAM,W,SACJE,a,CADI,W,CAIN,GAAMC,CAAAA,MAAM,CAAGC,WAAW,EAA1B,EAAA,CACA,GAAMC,CAAAA,UAAU,CAAG,CAAA,EAAA,2BAAA,WAAA,EAAe,CAAED,WAAW,CAA/C,MAAkC,CAAf,CAAnB,CAEAJ,MAAM,CAANA,IAAAA,CAAAA,IAAAA,CACA,CAAA,EAAA,IAAA,WAAA,EAAS,CAAEK,UAAX,CAAWA,UAAF,CAAT,EAAA,IAAA,CACQ,cAA2B,IAA1B,CAAA,SAA0B,MAA1B,SAA0B,CAA3B,MAA2B,MAA3B,MAA2B,CAC/B,CAAA,EAAA,sBAAA,WAAA,EAAoB,CAAED,WAAW,CAAjC,MAAoB,CAApB,EACA,GAAIE,OAAO,CAAPA,GAAAA,CAAJ,sBAAA,CAAwC,CAAA,EAAA,gBAAA,WAAA,IACxC,GACEA,OAAO,CAAPA,GAAAA,CAAAA,0BAAAA,EAEA,EAAE,MAAA,CAAA,OAAA,GAAA,WAAA,EAAkC,YAAcA,CAAAA,OAAO,CAH3D,QAGE,CAHF,CAIE,CACA,CAAA,EAAA,mBAAA,WAAA,IAGF,CACA,CAAA,EAAA,KAAA,CAAA,cAAA,EAAe,UAAM,CACnBC,MAAM,CAANA,SAAM,CAANA,CADF,CAAA,EAbJ,CAAA,WAiBUC,SAAAA,GAAD,CAAS,CACdC,OAAO,CAAPA,KAAAA,CAAAA,sBAAAA,CAAAA,GAAAA,EAlBJ,CAAA","sourcesContent":["/* globals __REPLACE_NOOP_IMPORT__ */\nimport initNext, * as next from './'\nimport EventSourcePolyfill from './dev/event-source-polyfill'\nimport initOnDemandEntries from './dev/on-demand-entries-client'\nimport initWebpackHMR from './dev/webpack-hot-middleware-client'\nimport initializeBuildWatcher from './dev/dev-build-watcher'\nimport initializePrerenderIndicator from './dev/prerender-indicator'\nimport { displayContent } from './dev/fouc'\n\n// Temporary workaround for the issue described here:\n// https://github.com/vercel/next.js/issues/3775#issuecomment-407438123\n// The runtimeChunk doesn't have dynamic import handling code when there hasn't been a dynamic import\n// The runtimeChunk can't hot reload itself currently to correct it when adding pages using on-demand-entries\n// eslint-disable-next-line no-unused-expressions\n__REPLACE_NOOP_IMPORT__\n\n// Support EventSource on Internet Explorer 11\nif (!window.EventSource) {\n  window.EventSource = EventSourcePolyfill\n}\n\nconst {\n  __NEXT_DATA__: { assetPrefix },\n} = window\n\nconst prefix = assetPrefix || ''\nconst webpackHMR = initWebpackHMR({ assetPrefix: prefix })\n\nwindow.next = next\ninitNext({ webpackHMR })\n  .then(({ renderCtx, render }) => {\n    initOnDemandEntries({ assetPrefix: prefix })\n    if (process.env.__NEXT_BUILD_INDICATOR) initializeBuildWatcher()\n    if (\n      process.env.__NEXT_PRERENDER_INDICATOR &&\n      // disable by default in electron\n      !(typeof process !== 'undefined' && 'electron' in process.versions)\n    ) {\n      initializePrerenderIndicator()\n    }\n\n    // delay rendering until after styles have been applied in development\n    displayContent(() => {\n      render(renderCtx)\n    })\n  })\n  .catch((err) => {\n    console.error('Error was not caught', err)\n  })\n"]},"metadata":{},"sourceType":"script"}